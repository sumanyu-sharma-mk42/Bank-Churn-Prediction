# -*- coding: utf-8 -*-
"""bank_churn.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XZlHttgHnxCnf6IvadP4--JqL9VSsSdY
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import warnings
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score, confusion_matrix
from sklearn.ensemble import RandomForestClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import f1_score

# %matplotlib inline
warnings.filterwarnings('ignore')

import pandas as pd
df = pd.read_csv("Bank Customer Churn Prediction.csv")
df.info()

df.drop(["customer_id"],axis=1,inplace=True)


df['country'] = df['country'].map({'France': 0, 'Spain' : 1,'Germany':2})
df['gender'] = df['gender'].map({'Male': 0, 'Female' : 1})
df['balance']=df['balance'].astype(int)
df['estimated_salary']=df['estimated_salary'].astype(int)

x=df.drop(columns='churn')
y=df['churn']
x_train,x_test,y_train,y_test = train_test_split(x,y,random_state=42,test_size=0.2)


# Initialize StandardScaler
sc = StandardScaler()
x_train_rescaled = sc.fit_transform(x_train)
x_test_rescaled = sc.transform(x_test)

# Initialize RandomForestClassifier
classifier = RandomForestClassifier(n_estimators=100, random_state=42)
dclassifier = DecisionTreeClassifier(random_state=42)
dclassifier.fit(x_train_rescaled,y_train)
classifier.fit(x_train_rescaled, y_train)

# Predict on the test set
y_pred = classifier.predict(x_test_rescaled)
dy_pred = dclassifier.predict(x_test_rescaled)

# Calculate and print accuracy
print("Accuracy:", accuracy_score(y_test, y_pred) * 100)

f1score = f1_score(y_test,y_pred)
df1score = f1_score(y_test,dy_pred)

if f1score>df1score:
    best_model = classifier
else:
    best_model = dclassifier


import pickle

with open('model2.pkl', 'wb') as file:
    pickle.dump(best_model, file)
